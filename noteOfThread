线程和进程最根本的区别是：进程是资源分配的单位，线程是调度和执行的单位。除了CPU之外（线程在运行时占用CPU资源）计算机内部的软硬件资源的分配与线程无关，
线程只能共享它所属进程的资源。

进程有并发性和交往性。

在java中负责实现线程功能的类是java.lang.Thread类。可以通过创建Thread的实例来创建新的线程。每个线程都是通过某个特定的Thread对象所对应的方法run()来
完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。该方法的缺点是如果自定义类已经继承了一个类，则无法继承Thread类。

多通过Runnable接口实现多继承。该方法克服了继承Thread无法多继承的缺点，实现Runnable接口的同时还可以继承某个类。

一个线程对象在其生命周期内要经历5个状态（新生状态、就绪状态、运行状态、阻塞状态、死亡状态）。
其中有四种原因会导致进程进入就绪状态：
1 新建线程：调用start()方法；2 阻塞状态：阻塞解除；3 运行线程：调用yield()方法，直接进入就绪状态；4 运行线程：JVM将CPU资源从本线程切换到其他线程。

运行状态在给定的时间片内没有执行结束，就会被系统给换下来回到就绪状态，也可能由于某些导致阻塞的事件进入阻塞状态。
有4中原因会导致线程进入阻塞状态：
1 执行sleep(int millsecond)方法，进入休眠，休眠结束，进入就绪状态。
2 执行wait()方法，使线程进入阻塞状态，使用nofity()方法唤醒，进入就绪状态。
3 线程运行时，因某个操作进入阻塞状态（比如执行IO流操作read()/write(),方法本身就是阻塞方法），当该操作消失后，线程进入就绪状态。
4 join()线程联合，某个线程等待另一个线程执行结束后继续执行时。

死亡状态：1 run()执行完毕 2 被强制终止，通过执行stop()或destroy()方法来终止一个线程（不推荐使用）。

通过Runnable接口实现Thread，具体步骤为，首先创建一个类实现Runnable接口，然后在类体中新建各种方法等。在主函数中首先通过自定义类new 一个实例，
创建线程对象，把实现了Runnable接口的对象作为参数传入，；例如：
public class TestThread implements Runnbale{
some method;
………………………………
public void main(String[] args){
TestThread testThread = new TestThread();
Thread thread = new Thread(testThread);
}
}
